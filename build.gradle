buildscript {
    ext {
        aliyunMavenUrl = "http://maven.aliyun.com/nexus/content/groups/public"
        junitPlatformVersion = "1.0.0-M4"

        if (project.rootProject.file("private.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("private.properties").newDataInputStream())
            bintrayUserProperty = properties.getProperty("bintrayUser")
            bintrayKeyProperty = properties.getProperty("bintrayKey")
        } else {
            bintrayUserProperty = ""
            bintrayKeyProperty = ""
        }
    }
    repositories {
        //maven { url aliyunMavenUrl }
        jcenter()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
        classpath "com.novoda:bintray-release:0.5.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    }
}

plugins {
    id "com.gradle.build-scan" version "1.8"
    id "com.dorongold.task-tree" version "1.2.2"
    id "org.jetbrains.kotlin.jvm" version "1.1.3-2"
    id "com.diffplug.gradle.spotless" version "3.4.0"
    id "nebula.javadoc-jar" version "5.1.0"
    id "nebula.source-jar" version "5.1.0"
    id "io.spring.dependency-management" version "1.0.3.RELEASE"
}

apply plugin: "java"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "com.novoda.bintray-release"
apply plugin: "org.jetbrains.dokka"

group "com.uchuhimo"
version "0.2"

repositories {
    //maven { url aliyunMavenUrl }
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.0"
    distributionType = Wrapper.DistributionType.ALL
}

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

junitPlatform {
    filters {
        engines {
            include "spek"
        }
    }
}

dependencyManagement {
    dependencies {
        dependency "com.google.guava:guava:22.0"

        dependencySet(group: "org.jetbrains.kotlin", version: "1.1.3-2") {
            entry "kotlin-stdlib"
            entry "kotlin-reflect"
            entry "kotlin-test"
        }
    }

    testImplementation {
        dependencies {
            dependency "com.natpryce:hamkrest:1.4.1.0"
            dependency "org.hamcrest:hamcrest-all:1.3"

            dependency "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"

            dependencySet(group: "org.jetbrains.spek", version: "1.1.2") {
                entry "spek-api"
                entry "spek-data-driven-extension"
                entry "spek-subject-extension"
                entry "spek-junit-platform-engine"
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "com.google.guava:guava"

    testImplementation "org.jetbrains.kotlin:kotlin-reflect"
    testImplementation "com.natpryce:hamkrest"
    testImplementation "org.jetbrains.spek:spek-api"
    testImplementation "org.jetbrains.spek:spek-data-driven-extension"
    testImplementation "org.jetbrains.spek:spek-subject-extension"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.jetbrains.spek:spek-junit-platform-engine"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
}

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

tasks.withType(KotlinCompile) {
    kotlinOptions {
        jvmTarget = "1.6"
        apiVersion = "1.1"
        languageVersion = "1.1"
    }
}

spotless {
    kotlin {
        ktlint("0.8.3")
        trimTrailingWhitespace()
        endWithNewline()
    }
}

dokka {
    outputFormat = "html"
    outputDirectory = javadoc.destinationDir
}

javadoc.dependsOn dokka

publish {
    userOrg = "uchuhimo"
    groupId = project.group
    artifactId = rootProject.name
    publishVersion = project.version
    licences = ["Apache-2.0"]
    desc = "a bidirectional map implementation for Kotlin"
    website = "https://github.com/uchuhimo/kotlinx-bimap"
    bintrayUser = bintrayUserProperty
    bintrayKey = bintrayKeyProperty
    dryRun = false
}

afterEvaluate {
    mavenJavadocJar.dependsOn javadocJar
    mavenSourcesJar.dependsOn sourceJar
    bintrayUpload.dependsOn(jar, mavenJavadocJar, mavenSourcesJar, check)
}

tasks.whenTaskAdded { task ->
    if (task.name == "generatePomFileForMavenPublication") {
        bintrayUpload.dependsOn task
    }
}

buildScan {
    licenseAgreementUrl = "https://gradle.com/terms-of-service"
    licenseAgree = "yes"
}
